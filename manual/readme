NAME
    my-shell / msh - my shell

SYNOPSIS
    my-shell [file]

DESCRIPTION
    msh is an absolutely non-POSIX-compliant shell that was built in a week and tested for an hour. Your milage may vary.

INVOKING THE SHELL
    msh accepts a single option argument, the path to a file containing commands to execute. msh executes each line in the file one-by-one.
    If no such file is provided, the shell enters interactive mode, allowing the user to move around the filesystem and type commands
    at their leisure.

USING THE SHELL
    A UNIX shell is a program that provides an interface to the features the OS provides for running commands [1]. As a UNIX shell, msh defines
    such a command as a string of arguments, which are described in detail in SHELL ARGUMENTS but broadly, consist of words separated by spaces.
    As a human, can think of a command as a request that the computer "do something" [2].
    
    In an interactive session, msh will wait for the user to type out a command and press enter. The first argument is either the name of one of
    msh's internal functions (which are listed in SHELL BUILTINS) or the path to an external program to execute.
    The rest of the arguments will either be passed into the invoked program, or if it is a special character, it may be parsed separately
    by msh. Such special characters are listed in SHELL OPERATORS and mostly revolve around input redirection and execution.
    
    Programs in directories that are in the PATH environment variable can be referenced by name, as in "ls" rather than "/usr/bin/ls." Note that
    msh does not currently make any attempt to set this variable, so using it as a login shell may be unsafe.
    More information on the environment and msh's interactions with it can be found in THE SHELL ENVIRONMENT.

SHELL ARGUMENTS
    A UNIX shell is more than a literal program. It is also a programming language unto itself.
    The arguments to a msh command are "words" (strings of one or more non-space characters) separated by whitespace (strings of one or more
    space characters).
    In other words, if the command "touch list.txt script.msh" is inputted, then the arguments are "touch", "list.txt" and "script.msh" in order.

    In order to reference filenames that contain spaces, quotes can be used. The characters considered to be quotes by msh are ', " and `.
    If the command "touch 'shopping list.txt'" is inputted, then the arguments are "touch" and "shopping list.txt".
    Any whitespace inside a pair of quotes will be respected by the shell and considered part of the argument.

SHELL BUILTIN COMMANDS
    help
        Read this manual in your favourite pager, or more if you haven't set PAGER.

    quit
        Exit the shell.
    
    cd [directory]
        Change the current directory to the specified directory if it exists.
        If no directory was specified, instead print the current working directory.
        If the directory is given as "-", instead return to the previous directory.

    echo [words...]
        Print the words supplied in order, separated by a space.

    dir [directory]
        List the contents of the given directory, along with file permissions, as in a call to "ls -al".
    
    clr
        Clear the screen, as in a call to "clear".
    
    environ
        Print all environment variables in the form VARIABLE=VALUE.

    pause
        Suspend msh until the user presses enter.
    
    lpath
        Toggle whether the long path is shown in the prompt. When on, as in the default, the absolute pathname of PWD is shown.
        When off, only the name of the current directory is shown.
    
    source <filename>
        Sources filename. Sourcing means every line of the file is executed by msh, with changes persisting to the current session.
    
    putenv <name> <value>
        Place the environment variable name=value into the shell's environment. An empty string can be supplied to value.
        Note that this has a distinct effect from simply unsetting the variable. For that, use clrenv.
        See THE SHELL ENVIRONMENT for more details on how to use environment variables.
    
    clrenv <name>
        Clear the environment variable with the given name from the environment.
        See THE SHELL ENVIRONMENT for more details on how to use environment variables.

    alias [<shortcut> <command>]
        Creates an alias or shortcut for the given command, as in "alias ll 'ls -l'". When msh next encounters the command ll, it will
        expand it to the words "ls -l" before continuing processing. Note that while the command can comprise multiple words, the shortcut cannot.

        If no arguments are given, alias will print out all of the user's aliases in the format shortcut=command.
    
    dealias [shortcut]
        Clears the given shortcut, rendering its behaviour back to how it was before aliasing. With no arguments, dealias clears all aliases.
    
    last [index]
        Execute the last command, if index is not given. If index is given, the user can execute commands further back.
        "last 2" will execute the command before the last, and so on and so forth. Note that msh has a limited amount of memory to store commands.

        If last is called and the index given has no command stored in it, then last will silently do nothing.

SHELL OPERATORS
    The following operators have varying functions and as such may have different grammatical rules.
    It is safe to assume by default that an operator must be separated from surrounding arguments with spaces, and that they can appear at any
    point in a command. If an operator works 

    > | >> <filename>
        Redirect STDOUT to the filename or path of the next argument. If using >, the file will be truncated (overwritten).
        If using >>, the output will be appended to the file instead. See I/O REDIRECTION for more information.
        In either case, the file will be created if it doesn't exist. The user is warned if filename cannot be found.

    2> | 2>> <filename>
        Redirect STDERR to the filename or path of the next argument. If using 2>, the file will be truncated (overwritten).
        If using 2>>, the output will be appended to the file instead. See I/O REDIRECTION for more information.
        In either case, the file will be created if it doesn't exist. The user is warned if filename cannot be found.

    &
        Placed at the end of a command to specify that the program should run in the background. The command will execute, but the user will
        regain control of the shell immediately rather than waiting for it to finish.
        This can only be used on external programs, not shell builtins, as explained in PROCESSES AND EXECUTION.

    $<variable>
        When an argument begins with the sign $, the rest of the argument is taken to be the name of an environment variable. msh will find
        that variable's value and replace this argument with it. If that variable is not set, the argument is untouched (for now).
        Note that msh currently can only expand a variable if it is the entire argument.
        Commands such as "echo lpath > $HOME/.mshrc" will not work.

THE SHELL ENVIRONMENT
    Programs in UNIX need a way to communicate with each other in order to share configs and other data.
    This is conveniently done using environment variables. An environment variable is a string with a name and value, written as NAME=value.
    Environment variables are traditionally named in uppercase to distinguish from normal shell variables [3]. 
    (Note: msh does not currently allow you to set any form of variables.)
    
    Environment variables are inherited by child processes, and so they collectively form your shell's "environment." To reference the value of
    an environment variable, one can place the name of the variable, preceded by the $ symbol.
    For example, if the environment variable SHELL=/bin/msh is set in your session, you could query it with "echo $SHELL". If SHELL is unset,
    then the argument is left as is, and the literal text "$SHELL" will be printed (for now).

    A somewhat opinionated list of the most important environment variables to know for practical use are:
        - HOME
            Contains the path to the current user's home directory.

        - PATH
            Contains a ":" separated list of directories on the filesystem. When the user inputs a command that isn't a msh builtin, each
            of these directories is searched one-by-one to identify the desired binary.
        
        - _
            Yes, that is an underscore. You would reference this as "$_" when writing commands. It expands to the last argument of the last
            inputted command. This is much more useful than you would think.


PROCESSES AND EXECUTION
    As a shell, msh's purpose is to provide convenient access to other programs on the filesystem. It is important to understand that when the
    user inputs a command that is not a msh builtin, the shell will pause, start the desired program and return control to the user afterwards.
    
    In technical terms, msh does this by forking its process, and it is actually quite capable of not waiting for the spawned child to terminate
    at all. If a user wishes to execute some lengthy command, they may use the & operator (placed at the end as mentioned in SHELL BUILTINS).
    To observe this behaviour, one can try the commands "sleep 60" and "sleep 60 &".

    Note that because msh does not fork for internals (for obvious reasons), the & operator is parsed but ignored when using builtins.
    It is useful only when invoking external programs.


I/O REDIRECTION
    From the earliest drafts, UNIX's creators deigned to ensure the file system was as easy to work with as possible [4].
    This is why in UNIX, everything is a file. The kernel treats every piece of data the exact same, no matter its source.

    As an example, the command "echo hello" simply dumps out 6 characters. Those characters look the same in your terminal as they do
    in the file "greeting.txt." msh provides the syntax of "echo hello > greeting.txt" which instructs the kernel to send that output
    into the given file rather than the user's terminal.

    msh provides operators to redirect the three standard streams - STDIN, STDOUT and STDERR. Storing the outputs of commands is powerful
    and convenient, and advanced users are encouraged to exploit it.

CONFIGURING THE SHELL
    Upon startup, msh sources the file at "$HOME/.mshrc". This can be useful if the user wishes to enable certain options like
    lpath, or to set up their preferred aliases. Environment variables can also be defined with putenv.

REFERENCES (this was mandatory for the assignment)
    [1] Ramey, C. (2011). The Bourne-Again Shell. The Architecture of Open Source Applications.

    [2] Kernighan, B. W. (1978). UNIX for Beginners (Vol. 1). MURRAY Hill, NJ: Bell Laboratories.

    [3] Kernighan, B. W., & Mashey, J. R. (1979). The UNIX™ programming environment. Software: Practice and Experience, 9(1), 1-15.

    [4] Kernighan, B. W., & Mashey, J. R. (1979). The UNIX™ programming environment. Software: Practice and Experience, 9(1), 1-15.
